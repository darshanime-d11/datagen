package main

import (
    "database/sql"
    "fmt"
    "time"

    "github.com/go-sql-driver/mysql"
)

var {{.FullyQualifiedModelName}}_mysql_connection *sql.DB

// Init_{{.FullyQualifiedModelName}}_mysql_connection initializes a shared MySQL connection for {{.FullyQualifiedModelName}}.
func Init_{{.FullyQualifiedModelName}}_mysql_connection(req *MySQLConfig) error {
    if _, err := Get_{{.FullyQualifiedModelName}}_mysql_connection(); err == nil {
        return nil
    }

    cfg := mysql.Config{
        User:            req.Username,
        Passwd:          req.Password,
        Addr:            fmt.Sprintf("%s:%d", req.Host, req.Port),
        DBName:          req.Database,
        ParseTime:       true,
        MultiStatements: true,
        Params:          map[string]string{"charset": "utf8mb4"},
    }
    // Optional timeouts: accept ms strings; ignore if empty or invalid
    if d, err := time.ParseDuration(req.Timeout); err == nil && d > 0 {
        cfg.Timeout = d
    }
    if d, err := time.ParseDuration(req.WriteTimeout); err == nil && d > 0 {
        cfg.WriteTimeout = d
    }
    db, err := sql.Open("mysql", cfg.FormatDSN())
    if err != nil {
        return fmt.Errorf("open db: %w", err)
    }

    if err := db.Ping(); err != nil {
        _ = db.Close()
        return fmt.Errorf("ping db: %w", err)
    }

    {{.FullyQualifiedModelName}}_mysql_connection = db
    return nil
}

// Get_{{.FullyQualifiedModelName}}_mysql_connection returns the shared MySQL DB or an error if not initialized.
func Get_{{.FullyQualifiedModelName}}_mysql_connection() (*sql.DB, error) {
    if {{.FullyQualifiedModelName}}_mysql_connection == nil {
        return nil, fmt.Errorf("mysql connection for {{.FullyQualifiedModelName}} is not initialized")
    }
    return {{.FullyQualifiedModelName}}_mysql_connection, nil
}

// Close_{{.FullyQualifiedModelName}}_mysql_connection closes the shared MySQL DB for {{.FullyQualifiedModelName}} if initialized.
func Close_{{.FullyQualifiedModelName}}_mysql_connection() error {
    if {{.FullyQualifiedModelName}}_mysql_connection == nil {
        return nil
    }
    err := {{.FullyQualifiedModelName}}_mysql_connection.Close()
    {{.FullyQualifiedModelName}}_mysql_connection = nil
    return err
}